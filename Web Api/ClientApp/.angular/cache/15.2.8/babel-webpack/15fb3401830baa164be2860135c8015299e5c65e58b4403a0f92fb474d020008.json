{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction LoginComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Email is required and should have a valid format. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Password is required and should be between 6 and 14 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"signup\"];\n};\nexport class LoginComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      inputEmail: new FormControl('', [Validators.required, Validators.email]),\n      inputPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(14)])\n    });\n  }\n  ngOnInit() {}\n  Submitted() {\n    this.service.loginUser([this.loginForm.value.inputEmail, this.loginForm.value.inputPassword]).subscribe(resp => {\n      const respObj = JSON.parse(resp);\n      this.router.navigate(['pages/home']);\n      localStorage.setItem('token', respObj.token);\n      alert('Successfully Login');\n    }, error => {\n      alert('Username or Password is incorrect !');\n    });\n  }\n  get Email() {\n    return this.loginForm.get('inputEmail');\n  }\n  get PWD() {\n    return this.loginForm.get('inputPassword');\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Service), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 23,\n  vars: 6,\n  consts: [[1, \"container\", \"pt-5\"], [1, \"mx-auto\", \"border\", \"p-4\", \"bg-light\", \"rounded\", 2, \"max-width\", \"400px\"], [1, \"needs-validation\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"inputEmail\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"inputEmail\", \"placeholder\", \"Enter your email\", \"formControlName\", \"inputEmail\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"inputPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"inputPassword\", \"placeholder\", \"Enter your password\", \"formControlName\", \"inputPassword\", \"required\", \"\", 1, \"form-control\"], [1, \"d-grid\", \"gap-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-lg\", 3, \"disabled\"], [1, \"text-center\"], [1, \"fw-bold\", \"text-body\", 3, \"routerLink\"], [1, \"invalid-feedback\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.Submitted();\n      });\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Email address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵtemplate(7, LoginComponent_div_7_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 9)(14, \"button\", 10)(15, \"b\");\n      i0.ɵɵtext(16, \"Log in\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(17, \"hr\");\n      i0.ɵɵelementStart(18, \"p\", 11);\n      i0.ɵɵtext(19, \"Don't have an account? \");\n      i0.ɵɵelementStart(20, \"a\", 12)(21, \"u\");\n      i0.ɵɵtext(22, \"Signup\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.inputEmail.invalid && (ctx.loginForm.controls.inputEmail.dirty || ctx.loginForm.controls.inputEmail.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.inputPassword.invalid && (ctx.loginForm.controls.inputPassword.dirty || ctx.loginForm.controls.inputPassword.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c0));\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i2.RouterLink, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;ICK3DC,+BAA8J;IAC5JA,mEACF;IAAAA,iBAAM;;;;;IAKNA,+BAAuK;IACrKA,sFACF;IAAAA,iBAAM;;;;;;ADNd,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,OAAgB,EAAUC,MAAc;IAAxC,YAAO,GAAPD,OAAO;IAAmB,WAAM,GAANC,MAAM;IAEpD,cAAS,GAAG,IAAIP,SAAS,CAAC;MACxBQ,UAAU,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,KAAK,CAAC,CAAC;MACxEC,aAAa,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CACjCC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EACvBV,UAAU,CAACW,SAAS,CAAC,EAAE,CAAC,CACzB;KACF,CAAC;EAT6D;EAC/DC,QAAQ,IAAU;EASlBC,SAAS;IACP,IAAI,CAACT,OAAO,CACTU,SAAS,CAAC,CACT,IAAI,CAACC,SAAS,CAACC,KAAK,CAACV,UAAoB,EACzC,IAAI,CAACS,SAAS,CAACC,KAAK,CAACP,aAAuB,CAC7C,CAAC,CACDQ,SAAS,CACPC,IAAI,IAAI;MACP,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAChC,IAAI,CAACb,MAAM,CAACiB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACpCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,OAAO,CAACM,KAAK,CAAC;MAC5CC,KAAK,CAAC,oBAAoB,CAAC;IAC7B,CAAC,EACAC,KAAK,IAAI;MACRD,KAAK,CAAC,qCAAqC,CAAC;IAC9C,CAAC,CACF;EACL;EACA,IAAIE,KAAK;IACP,OAAO,IAAI,CAACb,SAAS,CAACc,GAAG,CAAC,YAAY,CAAgB;EACxD;EACA,IAAIC,GAAG;IACL,OAAO,IAAI,CAACf,SAAS,CAACc,GAAG,CAAC,eAAe,CAAgB;EAC3D;;AAlCW3B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT3BlC,8BAA4B;MAEMA;QAAA,OAAYmC,eAAW;MAAA,EAAC;MACpDnC,8BAAkB;MAC2BA,8BAAc;MAAAA,iBAAQ;MACjEA,2BAA8H;MAC9HA,+DAEM;MACRA,iBAAM;MACNA,8BAAkB;MAC8BA,0BAAS;MAAAA,iBAAQ;MAC/DA,4BAA0I;MAC1IA,iEAEM;MACRA,iBAAM;MACNA,+BAA0B;MAC+DA,uBAAM;MAAAA,iBAAI;MAEnGA,sBAAI;MACJA,8BAAuB;MAAAA,wCAAuB;MAAAA,8BAAuD;MAAGA,uBAAM;MAAAA,iBAAI;;;MAnB9GA,eAAuB;MAAvBA,yCAAuB;MAIMA,eAA6H;MAA7HA,0JAA6H;MAO7HA,eAAsI;MAAtIA,mKAAsI;MAK/IA,eAA8B;MAA9BA,gDAA8B;MAGLA,eAAyB;MAAzBA,uDAAyB","names":["FormGroup","FormControl","Validators","i0","LoginComponent","constructor","service","router","inputEmail","required","email","inputPassword","minLength","maxLength","ngOnInit","Submitted","loginUser","loginForm","value","subscribe","resp","respObj","JSON","parse","navigate","localStorage","setItem","token","alert","error","Email","get","PWD","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\login\\login.component.ts","C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Service } from '../services/service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  constructor(private service: Service, private router: Router) {}\n  ngOnInit(): void {}\n  loginForm = new FormGroup({\n    inputEmail: new FormControl('', [Validators.required, Validators.email]),\n    inputPassword: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(14),\n    ]),\n  });\n  Submitted() {\n    this.service\n      .loginUser([\n        this.loginForm.value.inputEmail as string,\n        this.loginForm.value.inputPassword as string,\n      ])\n      .subscribe(\n        (resp) => {\n          const respObj = JSON.parse(resp);\n          this.router.navigate(['pages/home']);\n          localStorage.setItem('token', respObj.token);\n          alert('Successfully Login');\n        },\n        (error) => {\n          alert('Username or Password is incorrect !');\n        }\n      );\n  }\n  get Email(): FormControl {\n    return this.loginForm.get('inputEmail') as FormControl;\n  }\n  get PWD(): FormControl {\n    return this.loginForm.get('inputPassword') as FormControl;\n  }\n}\n","<div class=\"container pt-5\">\r\n  <div class=\"mx-auto border p-4 bg-light rounded\" style=\"max-width: 400px;\">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"Submitted()\" class=\"needs-validation\">\r\n      <div class=\"mb-3\">\r\n        <label for=\"inputEmail\" class=\"form-label\">Email address:</label>\r\n        <input type=\"email\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Enter your email\" formControlName=\"inputEmail\" required>\r\n        <div class=\"invalid-feedback\" *ngIf=\"loginForm.controls.inputEmail.invalid && (loginForm.controls.inputEmail.dirty || loginForm.controls.inputEmail.touched)\">\r\n          Email is required and should have a valid format.\r\n        </div>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"inputPassword\" class=\"form-label\">Password:</label>\r\n        <input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Enter your password\" formControlName=\"inputPassword\" required>\r\n        <div class=\"invalid-feedback\" *ngIf=\"loginForm.controls.inputPassword.invalid && (loginForm.controls.inputPassword.dirty || loginForm.controls.inputPassword.touched)\">\r\n          Password is required and should be between 6 and 14 characters long.\r\n        </div>\r\n      </div>\r\n      <div class=\"d-grid gap-2\">\r\n        <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"btn btn-primary btn-lg\"><b>Log in</b></button>\r\n      </div>\r\n      <hr>\r\n      <p class=\"text-center\">Don't have an account? <a [routerLink]=\"['signup']\" class=\"fw-bold text-body\"><u>Signup</u></a></p>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}