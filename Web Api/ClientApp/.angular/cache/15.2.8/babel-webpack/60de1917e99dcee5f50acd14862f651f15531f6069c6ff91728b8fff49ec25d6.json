{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet EditComponent = class EditComponent {\n  constructor(signinAuth, router, r) {\n    this.signinAuth = signinAuth;\n    this.router = router;\n    this.r = r;\n    this.addForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(14)]),\n      depid: new FormControl('', [Validators.required]),\n      cnic: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\n      age: new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\n      salary: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(6)])\n    });\n    this.isUserValid = false;\n  }\n  ngOnInit() {\n    this.signinAuth.addEmployee(this.router.snapshot.params.id).subscribe;\n  }\n  Submitted() {\n    this.signinAuth.addEmployee().subscribe(resp => {\n      if (resp.length === 0) {\n        this.isUserValid = false;\n        alert('Unsuccessful');\n      } else {\n        this.router.navigate(['pages/home']);\n      }\n    });\n  }\n  get name() {\n    return this.addForm.get('name');\n  }\n  get depid() {\n    return this.addForm.get('depid');\n  }\n  get cnic() {\n    return this.addForm.get('cnic');\n  }\n  get age() {\n    return this.addForm.get('age');\n  }\n  get salary() {\n    return this.addForm.get('salary');\n  }\n};\nEditComponent = __decorate([Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})], EditComponent);\nexport { EditComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAChD,SACEC,SAAS,EAGTC,WAAW,EACXC,UAAU,QACL,gBAAgB;AAQhB,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,UAAuB,EAAUC,MAAc,EAASC,CAAC;IAAzD,eAAU,GAAVF,UAAU;IAAuB,WAAM,GAANC,MAAM;IAAiB,MAAC,GAADC,CAAC;IAI7E,YAAO,GAAG,IAAIP,SAAS,CAAC;MACtBQ,IAAI,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CACxBC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;MACFC,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CACzBC,UAAU,CAACO,QAAQ,CACpB,CAAC;MACFI,IAAI,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CACxBC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,EAAE,CAAC,EACxBR,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;MACFG,GAAG,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CACvBC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFI,MAAM,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAC1BC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,CAAC;IACF,gBAAW,GAAY,KAAK;EA7BoD;EAChFK,QAAQ;IACN,IAAI,CAACX,UAAU,CAACY,WAAW,CAAC,IAAI,CAACX,MAAM,CAACY,QAAQ,CAACC,MAAM,CAACC,EAAE,CAAC,CAACC,SAAS;EACvE;EA2BAC,SAAS;IACP,IAAI,CAACjB,UAAU,CAACY,WAAW,EAAE,CAC5BI,SAAS,CAAEE,IAAW,IAAI;MACzB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,CAACC,WAAW,GAAG,KAAK;QACxBC,KAAK,CAAC,cAAc,CAAC;OACtB,MAAM;QACL,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAExC,CAAC,CAAC;EACJ;EACA,IAAInB,IAAI;IACN,OAAO,IAAI,CAACoB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAgB;EAChD;EACA,IAAIjB,KAAK;IACP,OAAO,IAAI,CAACgB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAgB;EACjD;EACC,IAAIhB,IAAI;IACP,OAAO,IAAI,CAACe,OAAO,CAACC,GAAG,CAAC,MAAM,CAAgB;EAC/C;EACA,IAAIf,GAAG;IACN,OAAO,IAAI,CAACc,OAAO,CAACC,GAAG,CAAC,KAAK,CAAgB;EAC9C;EACA,IAAId,MAAM;IACT,OAAO,IAAI,CAACa,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAgB;EACjD;CAEF;AA3DY1B,aAAa,eALzBJ,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW7B,aAAa,CA2DzB;SA3DYA,aAAa","names":["Component","FormGroup","FormControl","Validators","EditComponent","constructor","signinAuth","router","r","name","required","minLength","maxLength","depid","cnic","age","salary","ngOnInit","addEmployee","snapshot","params","id","subscribe","Submitted","resp","length","isUserValid","alert","navigate","addForm","get","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\pages\\edit\\edit.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  FormArray,\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n\n  constructor(private signinAuth: AuthService, private router: Router,private r) {}\n  ngOnInit(): void { \n    this.signinAuth.addEmployee(this.router.snapshot.params.id).subscribe\n  }\n  addForm = new FormGroup({\n    name: new FormControl('', [\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(14),\n    ]),\n    depid: new FormControl('', [\n      Validators.required,\n    ]),\n    cnic: new FormControl('', [\n      Validators.required,\n      Validators.minLength(13),\n      Validators.maxLength(13),\n    ]),\n    age: new FormControl('', [\n      Validators.required,\n      Validators.minLength(2),\n      Validators.maxLength(2),\n    ]),\n    salary: new FormControl('', [\n      Validators.required,\n      Validators.minLength(5),\n      Validators.maxLength(6),\n    ]),\n  });\n  isUserValid: boolean = false;\n  Submitted(){\n    this.signinAuth.addEmployee()\n    .subscribe((resp: any[]) => {\n      if (resp.length === 0) {\n        this.isUserValid = false;\n        alert('Unsuccessful');\n      } else {\n        this.router.navigate(['pages/home']);\n      }\n    });\n  }\n  get name(): FormControl {\n    return this.addForm.get('name') as FormControl;\n  }\n  get depid(): FormControl {\n    return this.addForm.get('depid') as FormControl;\n  }\n   get cnic():FormControl{\n    return this.addForm.get('cnic') as FormControl;\n   } \n   get age():FormControl{\n    return this.addForm.get('age') as FormControl;\n   }  \n   get salary():FormControl{\n    return this.addForm.get('salary') as FormControl;\n   } \n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}