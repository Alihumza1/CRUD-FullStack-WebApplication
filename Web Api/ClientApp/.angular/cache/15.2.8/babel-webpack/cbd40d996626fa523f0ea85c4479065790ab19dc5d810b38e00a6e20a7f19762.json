{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Email is invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password should be at least 6 and as long as 14 characters long \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"signup\"];\n};\nexport class LoginComponent {\n  constructor(loginAuth, router) {\n    this.loginAuth = loginAuth;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      inputEmail: new FormControl('', [Validators.required, Validators.email]),\n      inputPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(14)])\n    });\n  }\n  ngOnInit() {}\n  Submitted() {\n    this.loginAuth.loginUser([this.loginForm.value.inputEmail, this.loginForm.value.inputPassword]).subscribe(resp => {\n      const respObj = JSON.parse(resp);\n      this.router.navigate(['pages/home']);\n      localStorage.setItem('token', respObj.token);\n      alert('Successfully Login');\n    }, error => {\n      alert('Username or Password is incorrect !');\n    });\n  }\n  get Email() {\n    return this.loginForm.get('inputEmail');\n  }\n  get PWD() {\n    return this.loginForm.get('inputPassword');\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 20,\n  vars: 8,\n  consts: [[1, \"container\", \"pt-5\"], [1, \"mx-auto\", \"border\", \"p-4\", \"bg-light\", 2, \"width\", \"400px\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"type\", \"email\", \"id\", \"inputEmail\", \"placeholder\", \"Email address\", \"formControlName\", \"inputEmail\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"id\", \"inputPassword\", \"placeholder\", \"Password\", \"formControlName\", \"inputPassword\", \"required\", \"\", 1, \"form-control\"], [1, \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"fw-bold\", \"text-body\", 3, \"routerLink\"], [1, \"form-text\", \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.Submitted();\n      });\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelement(4, \"input\", 4);\n      i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 2, 0, \"div\", 5);\n      i0.ɵɵtemplate(6, LoginComponent_div_6_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 3);\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, LoginComponent_div_9_Template, 2, 0, \"div\", 5);\n      i0.ɵɵtemplate(10, LoginComponent_div_10_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"button\", 8);\n      i0.ɵɵtext(13, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(14, \"hr\");\n      i0.ɵɵelementStart(15, \"p\", 7);\n      i0.ɵɵtext(16, \"Don't have an account? \");\n      i0.ɵɵelementStart(17, \"a\", 9)(18, \"u\");\n      i0.ɵɵtext(19, \"Signup\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"required\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"email\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"required\"]) && (ctx.PWD.dirty || ctx.PWD.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"minlength\"]) || (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"maxlength\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(7, _c0));\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i2.RouterLink, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAQA,SAAS,EAACC,WAAW,EAACC,UAAU,QAAO,gBAAgB;;;;;;;;ICKvDC,+BAAwG;IACpGA,mCACJ;IAAAA,iBAAM;;;;;IACNA,+BAAqG;IACnGA,kCACJ;IAAAA,iBAAM;;;;;IAKJA,+BAAkG;IAChGA,sCACJ;IAAAA,iBAAM;;;;;IACNA,+BAAoI;IAClIA,iFACJ;IAAAA,iBAAM;;;;;;ADZV,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,SAAsB,EAAUC,MAAc;IAA9C,cAAS,GAATD,SAAS;IAAuB,WAAM,GAANC,MAAM;IAE1D,cAAS,GAAG,IAAIP,SAAS,CAAC;MACxBQ,UAAU,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,KAAK,CAAC,CAAC;MACxEC,aAAa,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACO,QAAQ,EAACP,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EAACV,UAAU,CAACW,SAAS,CAAC,EAAE,CAAC,CAAE;KAC3G,CAAC;EALmE;EACrEC,QAAQ,IAAU;EAKlBC,SAAS;IACP,IAAI,CAACT,SAAS,CACXU,SAAS,CAAC,CACT,IAAI,CAACC,SAAS,CAACC,KAAK,CAACV,UAAoB,EACzC,IAAI,CAACS,SAAS,CAACC,KAAK,CAACP,aAAuB,CAC7C,CAAC,CACDQ,SAAS,CACPC,IAAI,IAAI;MACP,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAChC,IAAI,CAACb,MAAM,CAACiB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACpCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,OAAO,CAACM,KAAK,CAAC;MAC5CC,KAAK,CAAC,oBAAoB,CAAC;IAC7B,CAAC,EACAC,KAAK,IAAI;MACRD,KAAK,CAAC,qCAAqC,CAAC;IAC9C,CAAC,CACF;EACL;EACA,IAAIE,KAAK;IACP,OAAO,IAAI,CAACb,SAAS,CAACc,GAAG,CAAC,YAAY,CAAgB;EACxD;EACA,IAAIC,GAAG;IACL,OAAO,IAAI,CAACf,SAAS,CAACc,GAAG,CAAC,eAAe,CAAgB;EAC3D;;AA9BW3B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT3BlC,8BAA8B;MAEIA;QAAA,OAAYmC,eAAW;MAAA,EAAC;MACpDnC,8BAAkB;MAEhBA,2BAA2H;MAC3HA,+DAEM;MACNA,+DAEI;MACNA,iBAAM;MACNA,8BAAkB;MAEhBA,2BAAgI;MAChIA,+DAEI;MACNA,iEAEI;MACJA,iBAAM;MACNA,+BAAyB;MACuDA,sBAAK;MAAAA,iBAAS;MAE9FA,sBAAI;MACJA,6BAAuB;MAAAA,wCAAuB;MAAAA,6BAClB;MAAGA,uBAAM;MAAAA,iBAAI;;;MA1BrCA,eAAuB;MAAvBA,yCAAuB;MAIWA,eAAkE;MAAlEA,iIAAkE;MAGlEA,eAA+D;MAA/DA,8HAA+D;MAO/DA,eAA4D;MAA5DA,yHAA4D;MAG9DA,eAA8F;MAA9FA,+LAA8F;MAK1GA,eAA8B;MAA9BA,gDAA8B;MAGLA,eAAyB;MAAzBA,uDAAyB","names":["FormGroup","FormControl","Validators","i0","LoginComponent","constructor","loginAuth","router","inputEmail","required","email","inputPassword","minLength","maxLength","ngOnInit","Submitted","loginUser","loginForm","value","subscribe","resp","respObj","JSON","parse","navigate","localStorage","setItem","token","alert","error","Email","get","PWD","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\login\\login.component.ts","C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormGroup,FormControl,Validators} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  constructor(private loginAuth: AuthService, private router: Router) {}\n  ngOnInit(): void {}\n  loginForm = new FormGroup({\n    inputEmail: new FormControl('', [Validators.required, Validators.email]),\n    inputPassword: new FormControl('', [Validators.required,Validators.minLength(8),Validators.maxLength(14),])\n  });\n  Submitted() {\n    this.loginAuth\n      .loginUser([\n        this.loginForm.value.inputEmail as string,\n        this.loginForm.value.inputPassword as string,\n      ])\n      .subscribe(\n        (resp) => {\n          const respObj = JSON.parse(resp);\n          this.router.navigate(['pages/home']);\n          localStorage.setItem('token', respObj.token);\n          alert('Successfully Login')\n        },\n        (error) => {\n          alert('Username or Password is incorrect !');\n        }\n      );\n  }\n  get Email(): FormControl {\n    return this.loginForm.get('inputEmail') as FormControl;\n  }\n  get PWD(): FormControl {\n    return this.loginForm.get('inputPassword') as FormControl;\n  }\n}\n","<div class=\"container pt-5 \" >\r\n  <div class=\"mx-auto border p-4 bg-light \" style=\"width: 400px; \">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"Submitted()\">\r\n      <div class=\"mb-3\">\r\n      \r\n        <input type=\"email\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Email address\" formControlName=\"inputEmail\" required>\r\n        <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['required'] && (Email.dirty || Email.touched)\">\r\n            Email is required\r\n        </div>\r\n        <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['email'] && (Email.dirty || Email.touched)\">\r\n          Email is invalid\r\n      </div>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        \r\n        <input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\" formControlName=\"inputPassword\"  required>\r\n        <div class=\"form-text text-danger\" *ngIf=\"PWD.errors?.['required'] && (PWD.dirty || PWD.touched)\">\r\n          Password is required\r\n      </div>\r\n      <div class=\"form-text text-danger\" *ngIf=\"PWD.errors?.['minlength'] || PWD.errors?.['maxlength'] && (Email.dirty || Email.touched)\">\r\n        Password should be at least 6 and as long as 14 characters long\r\n    </div>\r\n      </div>\r\n      <div class=\"text-center\">\r\n        <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"btn btn-primary \">Login</button>\r\n      </div>\r\n      <hr>\r\n      <p class=\"text-center\">Don't have an account? <a [routerLink]=\"['signup']\"\r\n        class=\"fw-bold text-body\"><u>Signup</u></a></p>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}