{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(request, next) {\n    // Get the authentication token from wherever you have stored it (e.g., local storage)\n    const authToken = localStorage.getItem('token');\n    // Clone the request and add the authorization header\n    const authRequest = request.clone({\n      setHeaders: {\n        Authorization: `bearer ${authToken}`\n      }\n    });\n    // Pass the modified request to the next interceptor or the HttpClient\n    return next.handle(authRequest);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAC1BC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/C;IACA,MAAMC,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC;MAChCC,UAAU,EAAE;QACVC,aAAa,EAAE,UAAUN,SAAS;;KAErC,CAAC;IAEF;IACA,OAAOD,IAAI,CAACQ,MAAM,CAACJ,WAAW,CAAC;EACjC;;AAbWP,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthInterceptor","intercept","request","next","authToken","localStorage","getItem","authRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Ali Hamza\\source\\repos\\ClassLibrary2\\Web Api\\ClientApp\\src\\app\\services\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Get the authentication token from wherever you have stored it (e.g., local storage)\r\n    const authToken = localStorage.getItem('token');\r\n    // Clone the request and add the authorization header\r\n    const authRequest = request.clone({\r\n      setHeaders: {\r\n        Authorization: `bearer ${authToken}`\r\n      }\r\n    });\r\n\r\n    // Pass the modified request to the next interceptor or the HttpClient\r\n    return next.handle(authRequest);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}